name: Python_CI/CD_Test

on:
  push:
    branches:
      - main

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest mysql-connector-python

      - name: Run tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          pytest test_app.py

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install required utilities
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 5: Build, tag, and push image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Building and pushing Docker image to ECR..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      
      - name: Debug Environment Variables
        run: |
          echo "Debugging ECR details..."
          echo "AWS ECR LOGIN URI: ${{ secrets.AWS_ECR_LOGIN_URI }}"
          echo "ECR REPOSITORY NAME: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "Full Image Path: ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"

      - name: Pull latest images
        run: |
          echo "Pulling the Docker image..."
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

         
          - name: Stop and remove container if running
          run: |
            if [ "$(docker ps -aq --filter name=first_deployement)" ]; then
              echo "Stopping and removing the existing container..."
              docker stop first_deployement || true
              docker rm -fv first_deployement || true
            else
              echo "No existing container to remove."
            fi
        
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=first_deployement \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            -e 'DB_HOST=${{ secrets.DB_HOST }}' \
            -e 'DB_USER=${{ secrets.DB_USER }}' \
            -e 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
            -e 'DB_NAME=${{ secrets.DB_NAME }}' \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      
      - name: Clean previous images and containers
        run: |
          docker system prune -f
        